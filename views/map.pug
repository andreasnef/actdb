extends layoutMap

block content
  include menu
  br
  div   
    
    h3. 
      Mapping
     
    div
     div#table
       div#map

     div#sideProfile

  script.
        var missingArray = !{JSON.stringify(missing)};
        var checkpointsArray = !{JSON.stringify(checkpoints)};
        var barracksArray = !{JSON.stringify(barracks)};
        var detentionCentresArray = !{JSON.stringify(centres)};
        var sitesArray = !{JSON.stringify(sites)};
        var eventsArray = !{JSON.stringify(events)};
        var partiesArray = !{JSON.stringify(parties)};
        
        var markerArrayMissing = new Array(missingArray.length)
        var markerArrayCheckpoints = new Array(checkpointsArray.length)
        var markerArrayBarracks = new Array(barracksArray.length)
        var markerArrayCentres = new Array(detentionCentresArray.length)
        var markerArraySites = new Array(sitesArray.length)
        var markerArrayEvents = new Array(eventsArray.length)

        var redMarker = L.AwesomeMarkers.icon({
          icon: 'ban-circle',
          markerColor: 'red'
        });

        var orangeMarker = L.AwesomeMarkers.icon({
          icon: 'glyphicon-fire',
          markerColor: 'orange'
        });

        var blueMarker = L.AwesomeMarkers.icon({
          icon: 'home',
          markerColor: 'blue'
        });
        
        var greenMarker = L.AwesomeMarkers.icon({
          icon: 'link',
          markerColor: 'green'
        });

        var purpleMarker = L.AwesomeMarkers.icon({
          icon: 'user',
          markerColor: 'purple'
        });

        var darkgreenMarker = L.AwesomeMarkers.icon({
          icon: 'glyphicon-record',
          markerColor: 'darkgreen'
        });

        for(var i = 0; i < eventsArray.length; i++){
          e = eventsArray[i];
          markerArrayEvents[i] = L.marker([e.location.coordinates[1], e.location.coordinates[0]], {icon: orangeMarker, code: e.code, name: e.name.en}).bindPopup("<a href='#' onclick=loadProfile('events','"+e.code+"');>"+e.name.en+"</a>");
        }
        
        for(var i = 0; i < sitesArray.length; i++){
          e = sitesArray[i];
          markerArraySites[i] = L.marker([e.location.coordinates[1], e.location.coordinates[0]], {icon: darkgreenMarker, code: e.code, name: e.name.en}).bindPopup("<a href='#' onclick=loadProfile('sites','"+e.code+"');>"+e.name.ar+"</a>");
        }

        for(var i = 0; i < detentionCentresArray.length; i++){
          e = detentionCentresArray[i];
          markerArrayCentres[i] = L.marker([e.location.coordinates[1], e.location.coordinates[0]], {icon: greenMarker, code: e.code, name: e.name.en}).bindPopup("<a href='#' onclick=loadProfile('locations','"+e.code+"');>"+e.name.ar+"</a>");
        }
        
        for(var i = 0; i < barracksArray.length; i++){
          e = barracksArray[i];
          markerArrayBarracks[i] = L.marker([e.location.coordinates[1], e.location.coordinates[0]], {icon: blueMarker, code: e.code, name: e.name.en}).bindPopup("<a href='#' onclick=loadProfile('locations','"+e.code+"');>"+e.name.ar+"</a>");
        }

        for(var i = 0; i < checkpointsArray.length; i++){
          e = checkpointsArray[i];
          markerArrayCheckpoints[i] = L.marker([e.location.coordinates[1], e.location.coordinates[0]], {icon: redMarker, code: e.code, name: e.name.en}).bindPopup("<a href='#' onclick=loadProfile('locations','"+e.code+"');>"+e.name.ar+"</a>");
        }

        for(var i = 0; i < missingArray.length; i++){
          e = missingArray[i];
          markerArrayMissing[i] = L.marker([e.location.coordinates[1], e.location.coordinates[0]],{icon: purpleMarker, code: e.code, name: e.name.ar.first}).bindPopup("<a href='#' onclick=loadProfile('missing','"+e.code+"');>"+e.name.ar.first+" "+e.name.ar.middle+" "+e.name.ar.last+"</a>");
          //markerArrayMissing[i] = L.marker([e.location.coordinates[1], e.location.coordinates[0]],{name: e.name.ar.first+" "+e.name.ar.middle+" "+e.name.ar.last},{icon: missingIcon}).bindPopup("<a href='#' onclick=loadProfile('missing','"+e.code+"');>"+e.name.ar.first+" "+e.name.ar.middle+" "+e.name.ar.last+"</a>");
        }

        var missingLayer = L.layerGroup(markerArrayMissing);
        var checkpointsLayer = L.layerGroup(markerArrayCheckpoints);
        var barracksLayer = L.layerGroup(markerArrayBarracks);
        var centresLayer = L.layerGroup(markerArrayCentres);
        var sitesLayer = L.layerGroup(markerArraySites);
        var eventsLayer = L.layerGroup(markerArrayEvents);

        var municipalitiesLayer = L.geoJson(municipalities, {style: style, onEachFeature: onEachFeature});
        
        var basemap = L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
             attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://mapbox.com">Mapbox</a>',
             maxZoom: 18,
             id: 'mapbox.streets',
             accessToken: 'pk.eyJ1IjoibWFsZW5hZ2UiLCJhIjoiY2o5c2FyczJwMG5xNzMzanp1Mm9nNWlvYyJ9.zyD3dgUl-JqNoSU3TeuL9g'
        });
        var map = L.map('map', {
          center: [33.8699, 35.8274],
          zoom: 9,
          layers: [basemap]
        });
        var baseMaps = {
          "Streets": basemap
        };

        var overlayMaps = {
          "Missing": missingLayer,
          "Checkpoints" : checkpointsLayer,
          "Barracks" : barracksLayer,
          "Detention Centres" : centresLayer,
          "Sites": sitesLayer,
          "Events": eventsLayer,
          "Municipalities": municipalitiesLayer
        };

        //- functions
        function style(feature) {
          //var color;
          var color = [];
          for(var i = 0; i < partiesArray.length; i++){
            if((partiesArray[i].control_areas) && (partiesArray[i].control_areas).length)
              if ((partiesArray[i].control_areas).indexOf(feature.id) != -1)
                //color = partiesArray[i].color;
                color.push(partiesArray[i].color);
                //console.log(color+" color");
          }

          return {
            //fillColor: getColor(feature.id),
            fillColor: color,
            //background: 'red',
            //- background: -webkit-linear-gradient(red, blue),
            //- background:    -moz-linear-gradient(red, blue),
            //- background:         linear-gradient(red, blue),
            weight: 2,
            opacity: 1,
            color: 'white',
            dashArray: '3',
            fillOpacity: 0.7
          };
        }

        function highlightFeature(e) {
          var layer = e.target;

          layer.setStyle({
              weight: 3,
              color: '#7F7E7E',
              dashArray: '',
              fillOpacity: 0.7
          });

          if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
              layer.bringToFront();
          }
          info.update(layer.feature.properties);
        }

        function resetHighlight(e) {
          municipalitiesLayer.resetStyle(e.target);
          info.update();
        }

        //- function zoomToFeature(e) {
        //-   map.fitBounds(e.target.getBounds());
        //- }

        var info = L.control();
        info.onAdd = function (map) {
          this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
          this.update();
          return this._div;
        };
        //- // method that we will use to update the control based on feature properties passed
        info.update = function (props) {
          this._div.innerHTML = '<h4>Municipality: </h4>' +  (props ? '<b>' + props.name + '</b><br />' : 'Hover over a municipality');
        };
        
        info.addTo(map);

        var legend = L.control({position: 'bottomright'});

        legend.onAdd = function (map) {
           var div = L.DomUtil.create('div', 'info legend')
        //-     grades = [0, 10, 20, 50, 100, 200, 500, 1000],
        //-     labels = [];

          // loop through our density intervals and generate a label with a colored square for each interval
          //- for (var i = 0; i < grades.length; i++) {
          //-   div.innerHTML +=
          //-     '<i style="background:'');
          //- }

           return div;
         };
        
         legend.addTo(map);


        function onEachFeature(feature, layer) {  
          layer.on({
            mouseover: highlightFeature,
            mouseout: resetHighlight,
            //- click: zoomToFeature
          });
        }

        L.control.layers(baseMaps, overlayMaps).addTo(map);

        //- var searchLayer = L.layerGroup().addTo(map);
        //- //... adding data in searchLayer ...
        //- map.addControl( new L.Control.Search({layer: missingLayer}) );
        //- //searchLayer is a L.LayerGroup contains searched markers

        //- var controlSearch = new L.Control.Search({
        //-   position:'topleft',
        //-   layer: missingLayer,
        //-   initial: false,
        //-   propertyName: 'name',
        //-   buildTip: function(text, val) {
        //-     var type = val.name;
        //-     return '<a href="#" class="">'+text+'<b>'+type+'</b></a>';
        //-     }
        //- });

        // second option
        //- var markersLayer = new L.LayerGroup();  //layer contain searched elements
        //- map.addLayer(markersLayer);

        //- for(var i = 0; i < missingArray.length; i++){
        //-   var code = missingArray[i].code,  //value searched
        //-   nameFull = missingArray[i].name.ar.first+" "+missingArray[i].name.ar.middle+" "+missingArray[i].name.ar.last,
        //-   name = missingArray[i].name.ar.first,
        //-   loc = [missingArray[i].location.coordinates[1],missingArray[i].location.coordinates[0]],    //position found
        //-   marker = new L.Marker(new L.latLng(loc), {code: code, name: name, nameFull: nameFull});//se property searched
        //-   marker.bindPopup(nameFull);
        //-   markersLayer.addLayer(marker);
        //- }
        
        //- map.addControl( new L.Control.Search({
        //-   position:'topleft',
        //-   propertyName: 'name',
        //-   layer: markersLayer,
        //-   initial: false,
        //-   zoom: 16,
        //-   marker: false,
        //-   buildTip: function(text, val) {
        //-     var type = val.name;
        //-     return '<a href="#" class="">'+type+'<b>'+type+'</b></a>';
        //-   }
        //- }) );


        //third option
        //- var poiLayers = L.layerGroup([missingLayer, checkpointsLayer])
        //- .addTo(map);
        
        //- L.control.search({
        //-   layer: poiLayers,
        //-   initial: false,
        //-   propertyName: 'name',
        //-   buildTip: function(text, val) {
        //-     var type = val.layer.feature.properties.amenity;
        //-     return '<a href="#" class="'+type+'">'+text+'<b>'+type+'</b></a>';
        //-   }
        //- })
        
        //- .addTo(map);
        
        //- map.addControl( controlSearch );
        
        //fourth option
        //var markersLayer = new L.LayerGroup();  //layer contain searched elements
        //map.addLayer(markersLayer);

        //for(var i = 0; i < missingArray.length; i++){
        //  var title = missingArray[i].code, //value searched
        //    nameFull = missingArray[i].name.ar.last+" "+missingArray[i].name.ar.middle+" "+missingArray[i].name.ar.first,
        //    name = missingArray[i].name.ar.first,
        //    loc = [missingArray[i].location.coordinates[1],missingArray[i].location.coordinates[0]],    //position found
        //    marker = new L.Marker(new L.latLng(loc), {title: title, name:name});//se property searched
        //marker.bindPopup(nameFull);
        //markersLayer.addLayer(marker);
        //}
        
        //var controlSearch = new L.Control.Search({layer: markersLayer, initial: false, propertyName: name, position:'topleft', zoom: 11, marker: false, textPlaceholder: 'search...' });
        //map.addControl( controlSearch );

        
        
        ////////////populate map with markers from sample data
        //- for(i in data) {
        //-   var title = data[i].title,  //value searched
        //-     loc = data[i].loc,    //position found
        //-     marker = new L.Marker(new L.latLng(loc), {title: title} );//se property searched
        //-   marker.bindPopup('title: '+ title );
        //-   markersLayer.addLayer(marker);
        //- }
        
        var poiLayers = L.layerGroup([
          missingLayer,
          checkpointsLayer,
          barracksLayer,
          centresLayer,
          sitesLayer,
          eventsLayer
        ])
        //.addTo(map);
        
        L.control.search({
          layer: poiLayers,
          initial: false,
          propertyName: 'name',
          position:'topleft',
          zoom: 16,
          marker: false,
          buildTip: function(text, val) {
            console.log("val "+val);
            //- var type = val.layer.feature.properties.amenity;
            return '<a href="#" class="'+val+'">'+val+'<b>'+text+'</b></a>';
          }
        })
        .addTo(map);