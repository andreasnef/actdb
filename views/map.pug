extends layout

block content
  include menu
  br
  div   
    
    h3. 
      Mapping
     
    div   
     div#table
       div#map

     div#sideProfile

  script.
        var missingArray = !{JSON.stringify(missing)};
        var checkpointsArray = !{JSON.stringify(checkpoints)};
        var barracksArray = !{JSON.stringify(barracks)};
        var detentionCentresArray = !{JSON.stringify(centres)};
        var sitesArray = !{JSON.stringify(sites)};
        var eventsArray = !{JSON.stringify(events)};
        var partiesArray = !{JSON.stringify(parties)};
        //console.log("array: "+partiesArray);
        
        var markerArrayMissing = new Array(missingArray.length)
        var markerArrayCheckpoints = new Array(checkpointsArray.length)
        var markerArrayBarracks = new Array(barracksArray.length)
        var markerArrayCentres = new Array(detentionCentresArray.length)
        var markerArraySites = new Array(sitesArray.length)
        var markerArrayEvents = new Array(eventsArray.length)

        var missingIcon = L.icon({ iconUrl: '/stylesheets/images/icon-purple.png', iconSize: [20, 30]});
        var checkpointIcon = L.icon({ iconUrl: '/stylesheets/images/icon-red.png', iconSize: [20, 35]});
        var barrackIcon = L.icon({ iconUrl: '/stylesheets/images/icon-blue.png', iconSize: [20, 30]});
        var detentionCentreIcon = L.icon({ iconUrl: '/stylesheets/images/icon-green.png', iconSize: [20, 30]});
        var sitesIcon = L.icon({ iconUrl: '/stylesheets/images/icon-yellow.png', iconSize: [20, 30]});
        var eventsIcon = L.icon({ iconUrl: '/stylesheets/images/icon-purple2.png', iconSize: [20, 30]});
        
        for(var i = 0; i < eventsArray.length; i++){
          e = eventsArray[i];
          markerArrayEvents[i] = L.marker([e.location.coordinates[1], e.location.coordinates[0]], {icon: eventsIcon}).bindPopup("<a href='#' onclick=loadProfile('events','"+e.code+"');>"+e.name.en+"</a>");
        }
        
        for(var i = 0; i < sitesArray.length; i++){
          e = sitesArray[i];
          markerArraySites[i] = L.marker([e.location.coordinates[1], e.location.coordinates[0]], {icon: sitesIcon}).bindPopup("<a href='#' onclick=loadProfile('sites','"+e.code+"');>"+e.name.ar+"</a>");
        }

        for(var i = 0; i < detentionCentresArray.length; i++){
          e = detentionCentresArray[i];
          markerArrayCentres[i] = L.marker([e.location.coordinates[1], e.location.coordinates[0]], {icon: detentionCentreIcon}).bindPopup("<a href='#' onclick=loadProfile('locations','"+e.code+"');>"+e.name.ar+"</a>");
        }
        
        for(var i = 0; i < barracksArray.length; i++){
          e = barracksArray[i];
          markerArrayBarracks[i] = L.marker([e.location.coordinates[1], e.location.coordinates[0]], {icon: barrackIcon}).bindPopup("<a href='#' onclick=loadProfile('locations','"+e.code+"');>"+e.name.ar+"</a>");
        }

        for(var i = 0; i < checkpointsArray.length; i++){
          e = checkpointsArray[i];
          markerArrayCheckpoints[i] = L.marker([e.location.coordinates[1], e.location.coordinates[0]], {icon: checkpointIcon}).bindPopup("<a href='#' onclick=loadProfile('locations','"+e.code+"');>"+e.name.ar+"</a>");
        }

        for(var i = 0; i < missingArray.length; i++){
          e = missingArray[i];
          markerArrayMissing[i] = L.marker([e.location.coordinates[1], e.location.coordinates[0]],{icon: missingIcon}).bindPopup("<a href='#' onclick=loadProfile('missing','"+e.code+"');>"+e.name.ar.first+" "+e.name.ar.middle+" "+e.name.ar.last+"</a>");
        }

        var missingLayer = L.layerGroup(markerArrayMissing);
        var checkpointsLayer = L.layerGroup(markerArrayCheckpoints);
        var barracksLayer = L.layerGroup(markerArrayBarracks);
        var centresLayer = L.layerGroup(markerArrayCentres);
        var sitesLayer = L.layerGroup(markerArraySites);
        var eventsLayer = L.layerGroup(markerArrayEvents);

        var municipalitiesLayer = L.geoJson(municipalities, {style: style, onEachFeature: onEachFeature});

        
        
        var basemap = L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
             attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
             maxZoom: 18,
             id: 'mapbox.streets',
             accessToken: 'pk.eyJ1IjoibWFsZW5hZ2UiLCJhIjoiY2o5c2FyczJwMG5xNzMzanp1Mm9nNWlvYyJ9.zyD3dgUl-JqNoSU3TeuL9g'
        });
        var map = L.map('map', {
          center: [33.8699, 35.8274],
          zoom: 9,
          layers: [basemap, missingLayer]
        });
        var baseMaps = {
          "Streets": basemap
        };

        var overlayMaps = {
          "Missing": missingLayer,
          "Checkpoints" : checkpointsLayer,
          "Barracks" : barracksLayer,
          "Detention Centres" : centresLayer,
          "Sites": sitesLayer,
          "Events": eventsLayer,
          "Municipalities": municipalitiesLayer
        };

        //- functions
        function style(feature) {
          var color;
          //var color = [];
          for(var i = 0; i < partiesArray.length; i++){
            if((partiesArray[i].control_areas) && (partiesArray[i].control_areas).length)
              if ((partiesArray[i].control_areas).indexOf(feature.id) != -1)
                color = partiesArray[i].color;
                //color.push(partiesArray[i].color);
          }

          return {
            //fillColor: getColor(feature.id),
            fillColor: color,
            //- background: #466368,
            //- background: -webkit-linear-gradient(red, blue),
            //- background:    -moz-linear-gradient(red, blue),
            //- background:         linear-gradient(red, blue),
            //-   //45deg,
            //-   #7F7E7E 10px,
            //-   #606dbc 10px,
            //-   #465298 10px,
            //-   #465298 20px
            //- ),
            weight: 2,
            opacity: 1,
            color: 'white',
            dashArray: '3',
            fillOpacity: 0.7
          };
        }

        function highlightFeature(e) {
          var layer = e.target;

          layer.setStyle({
              weight: 3,
              color: '#7F7E7E',
              dashArray: '',
              fillOpacity: 0.7
          });

          if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
              layer.bringToFront();
          }
          info.update(layer.feature.properties);
        }

        function resetHighlight(e) {
          municipalitiesLayer.resetStyle(e.target);
          info.update();
        }

        //- function zoomToFeature(e) {
        //-   map.fitBounds(e.target.getBounds());
        //- }

        var info = L.control();
        info.onAdd = function (map) {
          this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
          this.update();
          return this._div;
        };
        //- // method that we will use to update the control based on feature properties passed
        info.update = function (props) {
          this._div.innerHTML = '<h4>Municipality: </h4>' +  (props ? '<b>' + props.name + '</b><br />' : 'Hover over a municipality');
        };
        
        info.addTo(map);

        var legend = L.control({position: 'bottomright'});

        legend.onAdd = function (map) {
           var div = L.DomUtil.create('div', 'info legend')
        //-     grades = [0, 10, 20, 50, 100, 200, 500, 1000],
        //-     labels = [];

          // loop through our density intervals and generate a label with a colored square for each interval
          //- for (var i = 0; i < grades.length; i++) {
          //-   div.innerHTML +=
          //-     '<i style="background:'');
          //- }

           return div;
         };
        
         legend.addTo(map);

        function onEachFeature(feature, layer) {  
          layer.on({
            mouseover: highlightFeature,
            mouseout: resetHighlight,
            //- click: zoomToFeature
          });
        }

        L.control.layers(baseMaps, overlayMaps).addTo(map);





