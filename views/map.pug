extends layout

block content
  include menu
  br
  div   
    
    h3. 
      Mapping
     
    div
     div#table
       div#map

     div#sideProfile

  script.
        var missingArray = !{JSON.stringify(missing)};
        var checkpointsArray = !{JSON.stringify(checkpoints)};
        var barracksArray = !{JSON.stringify(barracks)};
        var detentionCentresArray = !{JSON.stringify(centres)};
        var sitesArray = !{JSON.stringify(sites)};
        var eventsArray = !{JSON.stringify(events)};
        var partiesArray = !{JSON.stringify(parties)};

        var redMarker = L.AwesomeMarkers.icon({icon: 'ban-circle', markerColor: 'red'});
        var orangeMarker = L.AwesomeMarkers.icon({icon: 'glyphicon-fire', markerColor: 'orange'});
        var blueMarker = L.AwesomeMarkers.icon({icon: 'home', markerColor: 'blue'});
        var greenMarker = L.AwesomeMarkers.icon({icon: 'link', markerColor: 'green'});
        var purpleMarker = L.AwesomeMarkers.icon({icon: 'user', markerColor: 'purple'});
        var darkgreenMarker = L.AwesomeMarkers.icon({icon: 'glyphicon-record', markerColor: 'darkgreen'});

        //var municipalities = #{municipalities};

        var municipalitiesLayer = L.geoJson(municipalities, {style: style, onEachFeature: onEachFeature});
        
        var basemap = L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
             attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://mapbox.com">Mapbox</a>',
             maxZoom: 18,
             id: 'mapbox.streets',
             accessToken: 'pk.eyJ1IjoibWFsZW5hZ2UiLCJhIjoiY2o5c2FyczJwMG5xNzMzanp1Mm9nNWlvYyJ9.zyD3dgUl-JqNoSU3TeuL9g'
        });
        var map = L.map('map', {
          center: [33.8699, 35.8274],
          zoom: 9,
          preferCanvas : true,
          layers: [basemap]
        });
        var baseMaps = {
          "Streets": basemap
        };

        //- functions
        function style(feature) {
          //var color;
          var color = [];
          for(var i = 0; i < partiesArray.length; i++){
            if((partiesArray[i].control_areas) && (partiesArray[i].control_areas).length)
              if ((partiesArray[i].control_areas).indexOf(feature.id) != -1)
                //color = partiesArray[i].color;
                color.push(partiesArray[i].color);
                //console.log(color+" color");
          }

          return {
            //fillColor: getColor(feature.id),
            fillColor: color,
            //background: 'red',
            //- background: -webkit-linear-gradient(red, blue),
            //- background:    -moz-linear-gradient(red, blue),
            //- background:         linear-gradient(red, blue),
            weight: 2,
            opacity: 1,
            color: 'white',
            dashArray: '3',
            fillOpacity: 0.7
          };
        }

        function highlightFeature(e) {
          var layer = e.target;

          layer.setStyle({
              weight: 3,
              color: '#7F7E7E',
              dashArray: '',
              fillOpacity: 0.7
          });

          if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
              layer.bringToFront();
          }
          info.update(layer.feature.properties);
        }

        function resetHighlight(e) {
          municipalitiesLayer.resetStyle(e.target);
          info.update();
        }

        //- function zoomToFeature(e) {
        //-   map.fitBounds(e.target.getBounds());
        //- }

        var info = L.control();
        info.onAdd = function (map) {
          this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
          this.update();
          return this._div;
        };
        //- // method that we will use to update the control based on feature properties passed
        info.update = function (props) {
          this._div.innerHTML = '<h4>Municipality: </h4>' +  (props ? '<b>' + props.name + '</b><br />' : 'Hover over a municipality');
        };
        
        info.addTo(map);

        function onEachFeature(feature, layer) {  
          layer.on({
            mouseover: highlightFeature,
            mouseout: resetHighlight,
            //- click: zoomToFeature
          });
        }

        var missingLayer = new L.LayerGroup();  //layer contain searched elements

        for(var i = 0; i < missingArray.length; i++){
          var code = missingArray[i].code,  //value searched
          nameFull = missingArray[i].name.ar.first+" "+missingArray[i].name.ar.middle+" "+missingArray[i].name.ar.last,
          name = missingArray[i].name.ar.first,
          loc = [missingArray[i].location.coordinates[1],missingArray[i].location.coordinates[0]],    //position found
          marker = new L.Marker(new L.latLng(loc), {icon: purpleMarker, code: code, name: name, nameFull: nameFull});//se property searched
          marker.bindPopup("<a href='#' onclick=loadProfile('missing','"+code+"');>"+nameFull+"</a>");
          missingLayer.addLayer(marker);
        }

        var checkpointsLayer = new L.LayerGroup();  //layer contain searched elements

        for(var i = 0; i < checkpointsArray.length; i++){
          var code = checkpointsArray[i].code,  //value searched
          name = checkpointsArray[i].name.en,
          loc = [checkpointsArray[i].location.coordinates[1],checkpointsArray[i].location.coordinates[0]],    //position found
          marker = new L.Marker(new L.latLng(loc), {icon: redMarker, code: code, name: name});//se property searched
          marker.bindPopup("<a href='#' onclick=loadProfile('locations','"+code+"');>"+name+"</a>");
          checkpointsLayer.addLayer(marker);
        }

        var barracksLayer = new L.LayerGroup();  //layer contain searched elements

        for(var i = 0; i < barracksArray.length; i++){
          var code = barracksArray[i].code,  //value searched
          name = barracksArray[i].name.en,
          loc = [barracksArray[i].location.coordinates[1],barracksArray[i].location.coordinates[0]],    //position found
          marker = new L.Marker(new L.latLng(loc), {icon: blueMarker, code: code, name: name});//se property searched
          marker.bindPopup("<a href='#' onclick=loadProfile('locations','"+code+"');>"+name+"</a>");
          barracksLayer.addLayer(marker);
        }

        var centresLayer = new L.LayerGroup();  //layer contain searched elements

        for(var i = 0; i < detentionCentresArray.length; i++){
          var code = detentionCentresArray[i].code,  //value searched
          name = detentionCentresArray[i].name.en,
          loc = [detentionCentresArray[i].location.coordinates[1],detentionCentresArray[i].location.coordinates[0]],    //position found
          marker = new L.Marker(new L.latLng(loc), {icon: greenMarker, code: code, name: name});//se property searched
          marker.bindPopup("<a href='#' onclick=loadProfile('locations','"+code+"');>"+name+"</a>");
          centresLayer.addLayer(marker);
        }

        var sitesLayer = new L.LayerGroup();  //layer contain searched elements

        for(var i = 0; i < sitesArray.length; i++){
          var code = sitesArray[i].code,  //value searched
          name = sitesArray[i].name.en,
          loc = [sitesArray[i].location.coordinates[1],sitesArray[i].location.coordinates[0]],    //position found
          marker = new L.Marker(new L.latLng(loc), {icon: darkgreenMarker, code: code, name: name});//se property searched
          marker.bindPopup("<a href='#' onclick=loadProfile('sites','"+code+"');>"+name+"</a>");
          sitesLayer.addLayer(marker);
        }

        var eventsLayer = new L.LayerGroup();  //layer contain searched elements

        for(var i = 0; i < eventsArray.length; i++){
          var code = eventsArray[i].code,  //value searched
          name = eventsArray[i].name.en,
          loc = [eventsArray[i].location.coordinates[1],eventsArray[i].location.coordinates[0]],    //position found
          marker = new L.Marker(new L.latLng(loc), {icon: orangeMarker, code: code, name: name});//se property searched
          marker.bindPopup("<a href='#' onclick=loadProfile('events','"+code+"');>"+name+"</a>");
          eventsLayer.addLayer(marker);
        }

        var poiLayers = L.layerGroup([
          missingLayer,
          checkpointsLayer,
          barracksLayer,
          centresLayer,
          sitesLayer,
          eventsLayer
        ])
        .addTo(map);
        
        map.addControl( new L.Control.Search({
          position:'topleft',
          propertyName: 'code',
          layer: poiLayers,
          initial: false,
          zoom: 12,
          textPlaceholder: 'Search by code',
          marker: {
            icon: false,
            circle: {
              radius: 20,
              color: '#0a0',
              opacity: 1
            }
          }
          //- buildTip: function(text, val) {
          //-   var type = val.name;
          //-   //- console.log("val"+val);
          //-   //- console.log(text);
          //-   return '<a href="#" class="">'+type+'</a>';
          //- }
        }) );

        // seach by coordinates
        L.control.coordinates({
          position:"bottomleft", //optional default "bootomright" 
          decimals:4, //optional default 4 
          decimalSeperator:".", //optional default "." 
          labelTemplateLat:"Latitude: {y}", //optional default "Lat: {y}" 
          labelTemplateLng:"Longitude: {x}", //optional default "Lng: {x}" 
          enableUserInput:true, //optional default true 
          useDMS:false, //optional default false 
          useLatLngOrder: true, //ordering of labels, default false-> lng-lat 
          markerType: L.marker, //optional default L.marker 
          markerProps: {}, //optional default {}, 
          textPlaceholder: 'Search by coordinate',
          //labelFormatterLng : funtion(lng){return lng+" lng"}, 
          //labelFormatterLat : funtion(lat){return lat+" lat"},
          customLabelFcn: function(latLonObj, opts) {"Search"} //optional default none 
        }).addTo(map);

        //box that shows coordinates as you move
        L.control.coordinates({
          position:"bottomleft",
          decimals:4,
          decimalSeperator:".",
          labelTemplateLat:"Latitude: {y}",
          labelTemplateLng:"Longitude: {x}"
        }).addTo(map);


        var overlayMaps = {
          "Missing": missingLayer,
          "Checkpoints" : checkpointsLayer,
          "Barracks" : barracksLayer,
          "Detention Centres" : centresLayer,
          "Sites": sitesLayer,
          "Events": eventsLayer,
          "Municipalities": municipalitiesLayer
        };

        L.control.layers(baseMaps, overlayMaps).addTo(map);